第2讲 信息的表示与存储

B (binary) 二进制
D (decimal) 十进制
O (octal) 八进制
H (hexadecimal) 十六进制


进制转换:
- 十进制转换成其他进制:整数部分除r取余法,小数部分乘r取整法
如十进制转换成二进制:
- 整数部分,r=2, 不断用除r的值继续除r,将余数由低位向高位排(高位在左)
- 小数部分,r=2.将取整的数由左至右排,小于1的数取整为0,取整之后要将取的整数减去再进行下一次的乘r.一直乘到满足所要的精度要求为止.
![example](./cpp/2.2dtob.png)
- 其他进制转换成十进制:
![how to](./cpp/2.2tod.png)
- 二进制转换成十六进制,每4位一组;
- 二进制转换成八进制,每3位一组.
- 十六进制转换成八进制,可以借助二进制进行转换,即先转成二进制,再转成八进制
![example](./cpp/2.2hbo.png)

所有数据如整形浮点型等都是以二进制的形式保存在计算机中的.

- 整数的存放:整数不管正整数还是负整数都是以补码的形式存放.
  - 原码:最高位为符号位,0为正数,1为负数. 问题:正负数相加可能会出错,如7+(-7)
  - 反码:正数的原码和反码一样.负数的反码则是将原码除符号位外的所有位按位取反. 能解决正负数相加的问题.(反码+反码)也是反码,再转成原码,计算正确. 问题:有+0和-0之分
  - 补码:正数的原码和补码一样.负数的补码为将反码+1. 正负数相加最后可能会有个1,但那个1是溢出出去了.取消了+0和-0之分
![example](./cpp/2.3yfb.png)

- 浮点数的存放.
将浮点数先转成二进制,然后转成规格化形式,最高位为符号位,指数则要加127然后转成二进制数,小数部分则直接将二进制数放入.
以下例子假定浮点数占8个字节.
![规格化](./cpp/2.3floatggh.png)  ![example](./cpp/2.3floatE.png)

- 西文字符的存放:包括英文字符,数字,各种符号.一般以ASCII码存放,其为7位二进制编码,从0-127共128个字符,包括控制字符(33个,起控制作用)和图形字符(可以显示).故这些字符都是以正整数值(ASCII值)存储.
![ascii](./cpp/2.4acii.png)



- [ ] test4第7题:
设int x=2，y=4，z=7；则执行x=y--＜=x| | x+y!=z后x，y的值分别为：
A.0,3   B.1,3   答案为B,我选的A,想不明白
