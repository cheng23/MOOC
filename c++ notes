### 第2讲 信息的表示与存储

B (binary) 二进制
D (decimal) 十进制
O (octal) 八进制
H (hexadecimal) 十六进制


进制转换:
- 十进制转换成其他进制:整数部分除r取余法,小数部分乘r取整法
如十进制转换成二进制:
- 整数部分,r=2, 不断用除r的值继续除r,将余数由低位向高位排(高位在左)
- 小数部分,r=2.将取整的数由左至右排,小于1的数取整为0,取整之后要将取的整数减去再进行下一次的乘r.一直乘到满足所要的精度要求为止.
![example](./cpp/2.2dtob.png)
![example](./cpp/2.2dtob.png)
- 其他进制转换成十进制:
![how to](./cpp/2.2tod.png)
- 二进制转换成十六进制,每4位一组;小数部分若不足4位则在最后补0,再算对应的数.
- 二进制转换成八进制,每3位一组.小数部分若不足3位则在最后补0,再算对应的数.
- 十六进制转换成八进制,可以借助二进制进行转换,即先转成二进制,再转成八进制
![example](./cpp/2.2hbo.png)

所有数据如整形浮点型等都是以二进制的形式保存在计算机中的.

- 整数的存放:整数不管正整数还是负整数都是以补码的形式存放.
  - 原码:最高位为符号位,0为正数,1为负数. 问题:正负数相加可能会出错,如7+(-7)
  - 反码:正数的原码和反码一样.负数的反码则是将原码除符号位外的所有位按位取反. 能解决正负数相加的问题.(反码+反码)也是反码,再转成原码,计算正确. 问题:有+0和-0之分
  - 补码:正数的原码和补码一样.负数的补码为将反码+1. 正负数相加最后可能会有个1,但那个1是溢出出去了.取消了+0和-0之分
![example](./cpp/2.3yfb.png)

- 浮点数的存放.
将浮点数先转成二进制,然后转成规格化形式,最高位为符号位,指数则要加127然后转成二进制数,小数部分则直接将二进制数放入.
以下例子假定浮点数占8个字节.
![规格化](./cpp/2.3floatggh.png)  ![example](./cpp/2.3floatE.png)

- 西文字符的存放:包括英文字符,数字,各种符号.一般以ASCII码存放,其为7位二进制编码,从0-127共128个字符,包括控制字符(33个,起控制作用)和图形字符(可以显示).故这些字符都是以正整数值(ASCII值)存储.
![ascii](./cpp/2.4acii.png)


### 第3讲 程序中数据的表示

- 数据类型: 基本类型(int,float,double,char,bool,void...),构造类型(数组,结构体struct,共用体union,枚举类型enum,类class),指针类型(*),引用类型(&)
![datatype](./cpp/3_1datatype.png)
- 基本数据类型的数据范围
- 浮点数存在计算误差,跟精度相关.如float的精度以外的数字都是乱的
- 字符型数据和整型数据之间可以通用
- 常量(字面常量,符号常量),变量
- 八进制常量前要加0(零),如012指八进制,对应于十进制的10
- 十六进制要在前加0x或0X,如0x1234,0xCF等
- 浮点型常量可以有小数形式和指数形式.
- 小数形式不能省掉小数点
- 指数形式即科学计数法,如0.314e+1,314.15E-2.其中e或E表示以10为底的幂,+号或-号后一定要是整数
- 浮点型常量默认为double型,在后面加f或F则为float型.
- 字符常量用单引号('')括起来的一个字符
- 字符常量还有用转义字符(\)表示的
- 常用的转义字符
![zhuanyi](./cpp/3_2zhuanyi.png)
![zhuanyi](./cpp/3_2zhuanyi2.png)
- \ooo和\xhh为通用转义字符,其中ooo表示1-3位八进制数表示的ASCII字符(0-377),hh表示1-2位十六进制表示的ASCII字符(0-FF).
如"\1234表示\123和4,因为\后面最多跟3位表示八进制
\128表示\12和8,因为8超出了八进制一位的最大数,所以不算八进制里的数
\19表示\1和9,因为9超出了八进制一位的最大数,所以不算八进制里的数
\9是错误的表示,因为9超出了八进制一位的最大数
\0xFE也是错误的,因为\后面若要接十六进制,是接x而不是0x.
- 例3.3,转义字符应用举例

- 字符串常量用双引号括起来
- 符号常量:#define 标识符 常量
- 变量定义要指定数据类型,来决定占用的空间大小:变量类型 变量名列表
- 一条语句只能定义相同类型的变量
- 不能对变量连续初始化,初始化时初值不能是变量或表达式
- 变量的const限定,定义时在前面加const,且定义的时候要初始化,且之后不能再对该变量进行修改
- 




iomanip
setiosflags(ios::fixed)
setpreision(16)


- [ ] test4第7题:
设int x=2，y=4，z=7；则执行x=y--＜=x| | x+y!=z后x，y的值分别为：
A.0,3   B.1,3   答案为B,我选的A,想不明白
